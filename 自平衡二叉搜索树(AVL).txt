#include<iostream>
#include<algorithm>//借用max函数
#include<vector>
using namespace std;

template<typename T>
struct Node {
	Node<T>* left;
	Node<T>* right;
	T data;
	int height;
	Node(T val) :data(val), height(1),left(nullptr), right(nullptr) {}
};

template<typename T>
class AVL {
private:
	Node<T>* root;

	//自平衡旋转：右单转、左单转、左右双转、右左双转
	Node<T>* rotate(Node<T>* root, T val, int lr) {
		if (lr == 0) {
			if (rheight(root->right) - rheight(root->left) == 2) {
				if (root->right->data < val)
					root = leftRotate(root);
				else root = rlRotate(root);
			}
		}
		else {
			if (rheight(root->right) - rheight(root->left) == 2) {
				if (root->right->data < val)
					root = leftRotate(root);
				else root = rlRotate(root);
			}
		}
		return root;
	}
	Node<T>* rightRotate(Node<T>* root) {
		Node<T>* rleft = root->left;
		root->left = rleft->right;
		rleft->right = root;
		root->height = max(rheight(root->left), rheight(root->right)) + 1;
		rleft->height = max(rheight(rleft->left), rheight(rleft->right)) + 1;
		return rleft;
	}
	Node<T>* leftRotate(Node<T>* root) {
		Node<T>* rright = root->right;
		root->right = rright->left;
		rright->left = root;
		root->height = max(rheight(root->left), rheight(root->right)) + 1;
		rright->height = max(rheight(rright->left), rheight(rright->right)) + 1;
		return rright;
	}
	Node<T>* lrRotate(Node<T>* root) {
		root->left = leftRotate(root->left);
		return rightRotate(root);
	}
	Node<T>* rlRotate(Node<T>* root) {
		root->right = rightRotate(root->right);
		return leftRotate(root);
	}

	//插入辅助函数
	Node<T>* insert(Node<T>* root, T val) {
		if (root) {
			if (root->data > val) {
				root->left = insert(root->left, val);
				root->height = max(rheight(root->left), rheight(root->right)) + 1;
				root = rotate(root, val, 0);
				return root;
			}
			if (root->data < val) {
				root->right = insert(root->right, val);
				root->height = max(rheight(root->left), rheight(root->right)) + 1;
				root = rotate(root, val, 1);
				return root;
			}
			return nullptr;
		}
		return new Node<T>(val);
	}

	//删除辅助函数
	Node<T>* del(Node<T>* root, T val) {
		if (root) {
			if (root->data > val) {
				root->left = del(root->left, val);
				root->left->height= max(rheight(root->right->left), rheight(root->right->right)) + 1;
				root->height = max(rheight(root->left), rheight(root->right)) + 1;
				root = rotate(root, val, 0);
			}
			else if (root->data < val) {
				root->right = del(root->right, val);
				root->right->height = max(rheight(root->right->left), rheight(root->right->right)) + 1;
				root->height = max(rheight(root->left), rheight(root->right)) + 1;
				root = rotate(root, val, 1);
			}
			else {
				Node<T>* r = nullptr;
				if (root->left || root->right) {
					r = root;
					if (rheight(root->left) > rheight(root->right)) {
						Node<T>* left = r->left;
						int i;
						for (i = 0; left->right != nullptr; i++) {
							left = left->right;
							if (i)
								r = r->right;
							else r = r->left;
						}
						if (i) {
							r->right = left->left;
							left->right = root->right;
							left->left = root->left;
						}
						else left->right = root->right;
						r = left;
						r->height = max(rheight(r->left), rheight(r->right)) + 1;
					}
					else {
						Node<T>* right = r->right;
						int i;
						for (i = 0; right->left != nullptr;i++) {
							right = right->left;
							if (i)
								r = r->left;
							else r = r -> right;
						}
						if (i) {
							r->left = right->right;
							right->right = root->right;
							right->left = root->left;
						}
						else  right->left = root->left;
						r->height = max(rheight(r->left), rheight(r->right)) + 1;
						r = right;
					}
				}
				root->left = nullptr;
				root->right = nullptr;
				root = r;
			}
			return root;
		}
		return nullptr;
	}

	//查找辅助函数
	bool find(Node<T>* root, T val) {
		if (root) {
			if (root->data == val)
				return true;
			if (root->data > val)
				return find(root->left, val);
			else return find(root->right, val);
		}
		return false;
	}

	//遍历辅助函数：前序遍历、中序遍历、后序遍历
	void preOrder(Node<T>* root) {
		if (root) {
			cout << root->data;
			preOrder(root->left);
			preOrder(root->right);
		}
	}
	void inOrder(Node<T>* root) {
		if (root) {
			inOrder(root->left);
			cout << root->data;
			inOrder(root->right);
		}
	}
	void postOrder(Node<T>* root) {
		if (root) {
			postOrder(root->left);
			postOrder(root->right);
			cout << root->data;
		}
	}

	int rheight(Node<T>* node) {
		if (node)
			return node->height;
		return 0;
	}

public:
	AVL(T val) { root = new Node<T>(val); }
	~AVL() {}

	//添加
	bool insert(T val) {

		Node<T>* p = insert(root, val);
		if (p)
			return true;
		return false;
	}

	//删除
	bool del(T val) {
		Node<T>* p = del(root, val);
		if (p)
			return true;
		return false;
	}

	//查询
	bool find(T val) {
		return find(root, val);
	}

	//遍历：前序遍历（dfs）、中序遍历、后序遍历、层序遍历（bfs）
	//前序遍历
	void preOrder() {
		preOrder(root);
		cout << endl;
	}
	//中序遍历
	void inOrder() {
		inOrder(root);
		cout << endl;
	}
	//后序遍历
	void postOrder() {
		postOrder(root);
		cout << endl;
	}
	//层序遍历
	void levelOrder() {
		if (root) {
			vector<Node<T>*> nodes;
			nodes.push_back(root);
			int n = 1;
			for (int i = 0; i < n; i++) {
				cout << nodes[i]->data;
				if (nodes[i]->left) {
					nodes.push_back(nodes[i]->left);
					n++;
				}
				if (nodes[i]->right) {
					nodes.push_back(nodes[i]->right);
					n++;
				}
			}
		}
		cout << endl;
	}
	//深度优先搜索
	void dfs() { preOrder(); }
	//广度优先搜索
	void bfs() { levelOrder(); }

	int height() { return root->height; }
};


int main() {
	AVL<int> avl(4);
	//添加测试
	cout << "----------添加测试----------" << endl;
	cout << "前序遍历：";
	avl.preOrder();
	avl.insert(2);
	cout << "前序遍历：";
	avl.preOrder();
	avl.insert(6);
	cout << "前序遍历：";
	avl.preOrder();
	avl.insert(1);
	cout << "前序遍历：";
	avl.preOrder();
	avl.insert(3);
	cout << "前序遍历：";
	avl.preOrder();
	avl.insert(7);
	cout << "前序遍历：";
	avl.preOrder();
	avl.insert(5);
	cout << "前序遍历：";
	avl.preOrder();
	avl.insert(8);
	cout << "前序遍历：";
	avl.preOrder();
	/*
		   4
		 ↙	↘
		2     6
	  ↙ ↘ ↙ ↘
	  1   3 5   7
			     ↘
			      8
	*/

	//自平衡旋转测试
	cout << "----------自平衡旋转测试----------" << endl;
	avl.insert(9);
	cout << "前序遍历：";
	avl.preOrder();
	/*
		   4
		 ↙	↘
		2     6
	  ↙ ↘ ↙ ↘
	  1   3 5   8
			  ↙ ↘
			  7   9
	*/

	//添加测试
	cout << "----------遍历测试----------" << endl;
	cout << "前序遍历：";
	avl.preOrder();
	cout << "中序遍历：";
	avl.inOrder();
	cout << "后序遍历：";
	avl.postOrder();
	cout << "层序遍历：";
	avl.levelOrder();
	cout << "深度优先搜索：";
	avl.dfs();
	cout << "广度优先搜索：";
	avl.bfs();

	//高度计算测试
	cout << "----------高度计算测试----------" << endl;
	cout << "height:" << avl.height() << endl;

	//删除测试
	cout << "----------删除测试----------" << endl;
	cout << "删除8：" << avl.del(8) << endl;
	cout << "前序遍历：";
	avl.preOrder();
	cout << "删除6：" << avl.del(6) << endl;
	cout << "前序遍历：";
	avl.preOrder();

	//查询测试
	cout << "----------查询测试----------" << endl;
	cout << "查找7：" << avl.find(7) << endl;
}
