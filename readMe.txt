实现简单的自平衡二叉搜索树(AVL)
在实现二叉搜索树(BST)的基础上增加自平衡旋转

结构体Node：左结点left、右结点right、数据data、高度height
类BST：根结点root

主要功能有：自平衡旋转、添加、删除、查询、遍历(前序遍历、中序遍历、后序遍历、层序遍历、深度优先搜索、广度优先搜索)、高度计算

时间复杂度：
1、自平衡旋转
比较左右子树根结点高度，时间复杂度为O(1)
2、添加
时间复杂度为O(logn)
3、删除
时间复杂度为O(logn)
4、查询
时间复杂度为O(logn)
5、遍历
遍历全结点，时间复杂度为O(n)
6、高度计算
因为AVL树维护了结点高度，只需返回根结点高度，时间复杂度为O(1)

总结：
1、二叉树算法的核心是递归，实现二叉树的任何功能都可通过递归实现
2、前序遍历是dfs的一种
3、BFS就是层序遍历，可以用队列的特点来实现
4、中序遍历是二叉搜索树结点从小到大排序
5、高度计算可以用前序遍历来实现
6、递归处理每个分支的一半，跟二分法类似，属于减治法或者分治法，用分治法的主定理来算T(n)=aT(n/b)+f(n)，f(n)∈O(n^d)，这里a=1，b=2，d=0，a=b^d，因此T(n)∈O(n^d*logn)=O(logn)
7、AVL树通过维护结点高度来计算平衡因子，不需要每层递归都计算左右子树高度(O(n))，不然会导致添加和删除结点的时间复杂度都为O(nlogn)
